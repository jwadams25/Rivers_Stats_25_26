---
title: "Tutorial 4: EDA with Numerical Data"
author: "YOUR NAME"
editor: visual
format: 
  gfm:
    fig-width: 8
    fig-height: 4
    toc: true
    toc_depth: 4
---

## Before You Begin

Be sure to **read everything** as the structure of the tutorial is such that everything builds upon the items that came before it.

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #FF585D; border-radius: 5px;"}
Any text highlighted in this red border will require you to either **edit and run a code chunk or just run a code chunk**.
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #006CB3; border-radius: 5px;"}
Any text highlighted in this blue border will **require you to answer a question**. You can type your response directly in the box with the blue border.
:::

## Up to this point, you've explored data that is either numerical or categorical. Here, you will expand the scope of questions you can explore by comparing numerical data across different groups.

Let's get after it.

# By the end of this tutorial, you should be able to...

1.  Ask statistical questions that lead you to explore numerical data across different groups
2.  Build box plots and generate the supporting statistics
3.  Build faceted histograms.

# 1: Load the libraries

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #FF585D; border-radius: 5px;"}
As always, run the library code first.
:::

```{r libraries}
library(tidyverse)
library(openintro)
library(skimr)
library(ggridges)
library(knitr)
library(ggthemes)
```

# 2: Load and learn about the data

Throughout this tutorial, the data frame you will explore, named *`county`*, is referenced in our textbook, [Introduction to Modern Statistics](https://openintro-ims.netlify.app/index.html), and is included in the `openintro` package.

## 2.1: Tasks and Questions

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #FF585D; border-radius: 5px;"}
1.  Run the code chunk below.
:::

```{r}
?county
glimpse(county)
```

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #006CB3; border-radius: 5px;"}
2.  What is the name of the data frame?
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #006CB3; border-radius: 5px;"}
3.  What are the observational units and how many are there?
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #006CB3; border-radius: 5px;"}
4.  How many numerical variables are there in this data frame?
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #006CB3; border-radius: 5px;"}
5.  How many categorical variables are there in this data frame?
:::

# 3: Ask statistical questions that lead you to explore numerical data across different groups

As you know, questions appear at the top of our statistics wheel. You then collect data, create visualizations, and generate statistics to help you answer your questions. Being able to ask good statistical questions is a key element to your work as a statistician and data scientist. Like any skill, you need to practice to develop your abilities! Let's do that now.

## 3.1: Tasks and Questions

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #006CB3; border-radius: 5px;"}
1.  Write down a question that would require you to explore one numerical variable and one categorical variable from this dataset called `county`.
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #006CB3; border-radius: 5px;"}
2.  What is the name of each variable? Be sure to write each name EXACTLY as it appears in the data frame.

    numerical variable =

    categorical variable =
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #006CB3; border-radius: 5px;"}
3.  Write down a second question that would require you to explore one numerical variable and one categorical variable.
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #006CB3; border-radius: 5px;"}
4.  What is the name of each variable? Be sure to write each name EXACTLY as it appears in the data frame.

    numerical variable =

    categorical variable =
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #006CB3; border-radius: 5px;"}
5.  Call Mr. Adams over to discuss the questions you just wrote questions.
:::

# 4: Build box plots and generate the supporting statistics

Displaying multiple box plots is one way to construct a visualization to compare numerical data distributions across different levels of a categorical variable. In this section of the tutorial, you will begin to explore the questions you asked above by creating a box plot for each level of the categorical variable.

## 4.1: Build the box plot

As you work through the tasks and questions, you will reference **one** of the questions you wrote in part 3.1.

### 4.1: Tasks and Questions

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #FF585D; border-radius: 5px;"}
1.  Replace `NAME_OF_DATA_FRAME`, `NUMERICAL_VARIABLE`, `CATEGORICAL_VARIABLE`.

    *\*\***Note:** The second line of this code tells the computer to filter or take out any cells that do not have a number. When a cell in your data frame is empty, it will automatically be filled with NA. The code you read there filters out any cell in the column of the variable you've defined that has NA in it)*
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #FF585D; border-radius: 5px;"}
2.  Run the code.
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #FF585D; border-radius: 5px;"}
3.  Add layers to this code to improve the title and labels on each axis and make it have the `theme_minimal`.
:::

```{r box plots}
NAME_OF_DATA_FRAME |>
  filter(!is.na(NUMERICAL_VARIABLE)) |>
  ggplot(aes(x = NUMERICAL_VARIABLE, y = CATEGORICAL_VARIABLE, color = CATEGORICAL_VARIABLE)) +
  geom_boxplot()
```

## 4.2: Generate the statistics to support what's shown in the box plot.

Once again, we need to generate statistics to provide more information about the visualization.

To do this, we need to use a few functions used to **wrangle our data**.

The three functions are:

-   `filter`

-   `group_by`

-   `select`

**`filter`**: Think of this function like the options you have when you are online shopping that allow you to narrow down the scope of products you'd like to see. In this case, filter adjusts the number of rows in your data frame. You do not always need to use this. We use it in this case because we do not want to include any cells in our numerical variable column that have an NA.

**`group_by`**: This function tells the computer to group all of the observations that share the same level. Think of this as if you were standing on the stage at all school and said, "Hi Everyone - right now I want middle school students to group together and upper school students to group together." Once they are grouped together in the room, or in this case the computer, can do things with each of those groups separately.

**`select`**: This tells the computer, "Hey, I know you have a ton of variables in this data frame, but I just want this/these specific variable(s)." You can also select multiple variables by just listing them with commas in between them.

### 4.2 Tasks and Questions

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #FF585D; border-radius: 5px;"}
1.  Replace `NAME_OF_DATA_FRAME`, `NUMERICAL_VARIABLE`, `CATEGORICAL_VARIABLE` to generate the statistics that support the box plots you made in the previous section.
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #FF585D; border-radius: 5px;"}
2.  Go back to second tutorial (2_EDA_Numerical_Data.qmd) and copy the `summarise` function, paste it below the line that has select, and edit it to fit this example.
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #FF585D; border-radius: 5px;"}
3.  Run the code.
:::

```{r stats to support box plots}
NAME_OF_DATA_FRAME |>
  filter(!is.na(NUMERICAL_VARIABLE)) |>
  group_by(CATEGORICAL_VARIABLE) |>
  select(NUMERICAL_VARIABLE) |>
  
```

## 4.3 Answer your question and consider what you're missing.

You've created a visualization and generated summary stats. Time to start making sense of what they tell you.

### 4.3 Tasks and Questions.

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #006CB3; border-radius: 5px;"}
1.  Using information learned through your box plots and the statistics you generated, answer the question you asked. **\*\*\***Be sure to comment on and compare the **shapes, center, and variability** using **statistical vocabulary** and **relevant statistics** in your answer.
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #006CB3; border-radius: 5px;"}
2.  Despite learning information to help answer your questions, what information might you be missing from the visualization you created? In other words, what aspects of the distribution might not be easily seen in a box blot. List at least two pieces of information.
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #006CB3; border-radius: 5px;"}
3.  What is another visualization that could help you uncover those missing pieces of information?
:::

# 5. Build faceted histograms

Because you realized that the box plots might be hiding key insights, you'll want to pop up other visualizations that will help you see if there is more insights to uncover in the data. Once you create both visualizations, you can determine which one best communicates the story in the data.

You will now create a **histogram for each level** of your categorical variable and stack them above and below one another.

For this section, you will continue to **use the same variables you used in part 4**.

## 5.1a: Tasks and Questions

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #FF585D; border-radius: 5px;"}
1.  Replace `NAME_OF_DATA_FRAME` and `NUMERICAL_VARIABLE` in the code chunk below question 5 in this section.
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #FF585D; border-radius: 5px;"}
2.  The last line of code (written in the code chunk below question 5 of this section) is going to do the stacking or **faceting**. You want to **facet it by the categorical** variable and then make the **number of rows** equal to the number of **levels for that categorical variable**. If you don't know the number of levels use the code chunk below.
:::

```{r number of levels}
county |>
  filter(!is.na(CATEGORICAL_VARIABLE)) |>
  select(CATEGORICAL_VARIABLE) |>
  group_by(CATEGORICAL_VARIABLE) |>
  count(CATEGORICAL_VARIABLE)
```

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #FF585D; border-radius: 5px;"}
3.  In the code chunk below question 5, change `CATEGORICAL_VARIABLE` , `NUMBER_OF_LEVELS`, and `BIN_WIDTH`
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #FF585D; border-radius: 5px;"}
4.  Run the code.
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #FF585D; border-radius: 5px;"}
5.  Add layers to this code to improve the title and labels on each axis and make it have the theme_minimal.
:::

```{r faceted histograms}

 NAME_OF_DATA_FRAME |>
  filter(!is.na(NUMERICAL_VARIABLE) & !is.na(CATEGORICAL_VARIABLE)) |>
  ggplot(aes(x = NUMERICAL_VARIABLE)) +
  geom_histogram(binwidth = BIN_WIDTH) +
  facet_wrap(~CATEGORICAL_VARIABLE, nrow = NUMBER_OF_LEVELS)

```

## 5.1b: Tasks and Questions

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #006CB3; border-radius: 5px;"}
1.  Did you learn anything new about the distributions by looking at the visualizations you just created? If so, explain.
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #006CB3; border-radius: 5px;"}
2.  What is one new statistical question that you'd want to explore based on what you learned through the faceted histogram?
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #006CB3; border-radius: 5px;"}
3.  Call Mr. Adams over to chat through your work on the tutorial thus far.
:::

# 6: Build a Ridge Plot

A ridge plot is one more way to visualize distributions across different groups.

## For this part of the tutorial, we will explore the question:

**Is there a relationship between a county's median household income and whether or not that county contains a metropolitan area?**

## 6: Tasks and Questions

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #006CB3; border-radius: 5px;"}
1.  Which variables would we need to use to explore that question? Type the names of the variables EXACTLY as they appear in the data frame into the code chunk below.
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #FF585D; border-radius: 5px;"}
2.  Add in a row that filters out any `NA` values for the numerical variable.
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #FF585D; border-radius: 5px;"}
3.  Run the code.
:::

```{r ridges}
NAME_OF_DATA_FRAME |>
  ggplot(aes(x = NUMERICAL_VARIABLE, 
             y = CATEGORICAL_VARIABLE, 
             color = CATEGORICAL_VARIABLE, 
             fill = CATEGORICAL_VARIABLE)) +
  geom_density_ridges(alpha = 0.5)

```

What's going on with the scales?

What can you do about that?

The next few questions will help you adjust the scales.

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #FF585D; border-radius: 5px;"}
5.  You can learn more about what may be going on with the scales by generating the statistics to support the ridge plot. Understanding the statistics can then help you get a sense of how you should adjust your axes. Run the code below to do just that.
:::

```{r stats for scales}
county |>
  filter(!is.na(median_hh_income)) |>
  group_by(metro) |>
  select(median_hh_income) |>
    summarise(
    Mean = mean(median_hh_income),
    Median = median(median_hh_income),
    SD = sd(median_hh_income),
    IQR = IQR(median_hh_income),
    Q_one = quantile(median_hh_income, 0.25),
    Q_three = quantile(median_hh_income, 0.75),
    minimum_value = min(median_hh_income),
    maximum_value = max(median_hh_income)
  )

```

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #FF585D; border-radius: 5px;"}
6.  Now that you have the summary statistics, go back up to the code you wrote to generate the ridge plot and define the scale for the x-axis. Once changed, run the code again.
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #FF585D; border-radius: 5px;"}
7.  Add layers to this code to improve the labels title and labels on each axis. Also add layers to the plat that make the theme `theme_minimal`, the color `scale_color_colorblind()`, and the fill `scale_fill_colorblind()`.
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #006CB3; border-radius: 5px;"}
8.  Describe the distributions you just created. Be sure to comment on and compare the shape, center, and variability of the distributions.
:::

# 7 - Bonus: Two Numerical Variables and a Categorical Variable

## For this part of the tutorial, we will explore the following question:

**Is there an association between the homeownership rate, poverty rate, and whether the county contains a metropolitan area?**

## 7 - Bonus: Tasks and Questions

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #006CB3; border-radius: 5px;"}
1.  What are the three variables we will need to explore this question? Label the variable that is the response variable. Type the names EXACTLY as they appear in the county data frame.
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #FF585D; border-radius: 5px;"}
2.  Replace `NAME_OF_DATA_FRAME`, `CATEGORICAL_VARIABLE`, `NUMERICAL_VARIABLE_X`, `NUMERICAL_VARIABLE_RESPONSE` with the appropriate variable names. (Hint: You will want home ownership on the y-axis)
:::

```{r scatter with color}
NAME_OF_DATA_FRAME |>
  filter(!is.na(CATEGORICAL_VARIABLE)) |>
  ggplot(aes(x = NUMERICAL_VARIABLE_X, y = NUMERICAL_VARIABLE_RESPONSE, color = CATEGORICAL_VARIABLE)) +
  geom_point(alpha = 0.25) +
  theme_minimal()

```

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #FF585D; border-radius: 5px;"}
3.  Run the code.
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #006CB3; border-radius: 5px;"}
4.  Looking at the visualization you created, answer the following:

What do you notice?

What do you wonder?
:::

::: {style="color: black; background-color: white; padding: 15px; border: 5px solid #006CB3; border-radius: 5px;"}
5.  You've now **crushed 4 challenging coding tutorials** and are well on your way to being a pro! Turn on your favorite pump up song, **turn up the volume on your computer**, and pat yourself on the back!
:::
